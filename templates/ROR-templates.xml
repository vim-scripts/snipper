<?xml version="1.0" encoding="UTF-8"?>
<!--
This file/template contain Ruby on Rails snippets based on TextMate software ( http://macromates.com ). This snippets where ported to Scribes by Douglas Morato ( douglas@douglasmorato.com ), from a previous Dr. Nick work on RadRails snippets ( http://drnicwilliams.com/2006/11/06/post-halloween-radrails-trick-all-textmate-snippets-available/ ).
-->

<snippet><entry><trigger id="Ruby">all</trigger><description>&quot;tm - all? { |e| .. }&quot;</description><template>all? { |${e}| ${cursor} }</template></entry><entry><trigger id="Ruby">am</trigger><description>&quot;tm - alias_method ..&quot;</description><template>alias_method :${new_name}, :${old_name}</template></entry><entry><trigger id="Ruby">am-1</trigger><description>&quot;tm - alias_method ..&quot;</description><template>alias_method :${new_name}, :${old_name}</template></entry><entry><trigger id="Ruby">any</trigger><description>&quot;tm - any? { |e| .. }&quot;</description><template>any? { |${e}| ${cursor} }</template></entry><entry><trigger id="Ruby">app</trigger><description>&quot;tm - application_code { .. }&quot;</description><template>if __FILE__ == $$PROGRAM_NAME
	${cursor}
end</template></entry><entry><trigger id="Ruby">Array</trigger><description>&quot;tm - Array.new(10) { |i| .. }&quot;</description><template>Array.new(${10}) { |${i}|${cursor} }</template></entry><entry><trigger id="Ruby">art</trigger><description>&quot;tm - assert_redirected_to&quot;</description><template>assert_redirected_to :action =&gt; &quot;${index}&quot;</template></entry><entry><trigger id="Ruby">as</trigger><description>&quot;tm - assert(..)&quot;</description><template>assert(${test}, &quot;${message}&quot;)</template></entry><entry><trigger id="Ruby">ase</trigger><description>&quot;tm - assert_equal(..)&quot;</description><template>assert_equal(${expected}, ${actual})</template></entry><entry><trigger id="Ruby">asid</trigger><description>&quot;tm - assert_in_delta(..)&quot;</description><template>assert_in_delta(${expected_float}, ${actual_float}, ${20})</template></entry><entry><trigger id="Ruby">asio</trigger><description>&quot;tm - assert_instance_of(..)&quot;</description><template>assert_instance_of(${ExpectedClass}, ${actual_instance})</template></entry><entry><trigger id="Ruby">asko</trigger><description>&quot;tm - assert_kind_of(..)&quot;</description><template>assert_kind_of(${ExpectedKind}, ${actual_instance})</template></entry><entry><trigger id="Ruby">asm</trigger><description>&quot;tm - assert_match(..)&quot;</description><template>assert_match(/${expected_pattern}/, ${actual_string})</template></entry><entry><trigger id="Ruby">asn</trigger><description>&quot;tm - assert_nil(..)&quot;</description><template>assert_nil(${instance})</template></entry><entry><trigger id="Ruby">asne</trigger><description>&quot;tm - assert_not_equal(..)&quot;</description><template>assert_not_equal(${unexpected}, ${actual})</template></entry><entry><trigger id="Ruby">asnm</trigger><description>&quot;tm - assert_no_match(..)&quot;</description><template>assert_no_match(/${unexpected_pattern}/, ${actual_string})</template></entry><entry><trigger id="Ruby">asnn</trigger><description>&quot;tm - assert_not_nil(..)&quot;</description><template>assert_not_nil(${instance})</template></entry><entry><trigger id="Ruby">asnr</trigger><description>&quot;tm - assert_nothing_raised(..) { .. }&quot;</description><template>assert_nothing_raised(${Exception}) { ${cursor} }</template></entry><entry><trigger id="Ruby">asns</trigger><description>&quot;tm - assert_not_same(..)&quot;</description><template>assert_not_same(${unexpected}, ${actual})</template></entry><entry><trigger id="Ruby">asnt</trigger><description>&quot;tm - assert_nothing_thrown { .. }&quot;</description><template>assert_nothing_thrown { ${cursor} }</template></entry><entry><trigger id="Ruby">aso</trigger><description>&quot;tm - assert_operator(..)&quot;</description><template>assert_operator(${left}, :${operator}, ${right})</template></entry><entry><trigger id="Ruby">asr</trigger><description>&quot;tm - assert_raise(..) { .. }&quot;</description><template>assert_raise(${Exception}) { ${cursor} }</template></entry><entry><trigger id="Ruby">asre</trigger><description>&quot;tm - assert_response&quot;</description><template>assert_response :${success}</template></entry><entry><trigger id="Ruby">asrt</trigger><description>&quot;tm - assert_respond_to(..)&quot;</description><template>assert_respond_to(${object}, :${method})</template></entry><entry><trigger id="Ruby">ass</trigger><description>&quot;tm - assert_same(..)&quot;</description><template>assert_same(${expected}, ${actual})</template></entry><entry><trigger id="Ruby">ass-1</trigger><description>&quot;tm - assert_send(..)&quot;</description><template>assert_send([${object}, :${message}, ${args}])</template></entry><entry><trigger id="Ruby">ast</trigger><description>&quot;tm - assert_throws(..) { .. }&quot;</description><template>assert_throws(:${expected}) { ${cursor} }</template></entry><entry><trigger id="Ruby">b</trigger><description>&quot;tm - New Block&quot;</description><template>=begin rdoc
	${cursor}
=end</template></entry><entry><trigger id="Ruby">begin</trigger><description>&quot;tm - begin … rescue … end&quot;</description><template>begin
	${paste}
rescue ${Exception} =&gt; ${e}
	${cursor}
end
</template></entry><entry><trigger id="Ruby">bm</trigger><description>&quot;tm - Benchmark.bmbm(..) do .. end&quot;</description><template>TESTS = ${10_000}
Benchmark.bmbm(${10}) do |results|
  ${cursor}
end</template></entry><entry><trigger id="Ruby">bt</trigger><description>&quot;tm - belongs_to&quot;</description><template>belongs_to :${object}</template></entry><entry><trigger id="Ruby">case</trigger><description>&quot;tm - case … end&quot;</description><template>case ${object}
when ${condition}
	${cursor}
end</template></entry><entry><trigger id="Ruby">cl</trigger><description>&quot;tm - classify { |e| .. }&quot;</description><template>classify { |${e}| ${cursor} }</template></entry><entry><trigger id="Ruby">cla</trigger><description>&quot;tm - class .. &lt; DelegateClass .. initialize .. end&quot;</description><template>class ${ClassName} &lt; DelegateClass(${ParentClass})
	def initialize${1}
		super(${del_obj})
		
		${cursor}
	end
	
	
end</template></entry><entry><trigger id="Ruby">cla-1</trigger><description>&quot;tm - class .. &lt; ParentClass .. initialize .. end&quot;</description><template>class ${ClassName} &lt; ${ParentClass}
	def initialize${1}
		${cursor}
	end
	
	
end</template></entry><entry><trigger id="Ruby">cla-2</trigger><description>&quot;tm - class .. &lt; Struct .. initialize .. end&quot;</description><template>class ${ClassName} &lt; Struct.new(:${attr_names})
	def initialize(*args)
		super
		
		${cursor}
	end
	
	
end</template></entry><entry><trigger id="Ruby">cla-3</trigger><description>&quot;tm - class .. end&quot;</description><template>class ${ClassName}
	${cursor}
end</template></entry><entry><trigger id="Ruby">cla-4</trigger><description>&quot;tm - class .. initialize .. end&quot;</description><template>class ${ClassName}
	def initialize${1}
		${cursor}
	end
	
	
end</template></entry><entry><trigger id="Ruby">cla-5</trigger><description>&quot;tm - class &lt;&lt; self .. end&quot;</description><template>class &lt;&lt; ${self}
	${cursor}
end</template></entry><entry><trigger id="Ruby">cla-6</trigger><description>&quot;tm - class BlankSlate .. initialize .. end&quot;</description><template>class ${BlankSlate}
	instance_methods.each { |meth| undef_method(meth) unless meth =~ /\A__/ }
	
	def initialize${var}
		@${delegate} = ${delegate_object}
		
		${cursor}
	end
	
	def method_missing(meth, *args, &amp;block)
		@${delegate}.send(meth, *args, &amp;block)
	end
	
	
end</template></entry><entry><trigger id="Ruby">clafn</trigger><description>&quot;tm - class_from_name()&quot;</description><template>split(&quot;::&quot;).inject(Object) { |par, const| par.const_get(const) }</template></entry><entry><trigger id="Ruby">class</trigger><description>&quot;tm - class … end&quot;</description><template>class ${ClassName}
	${cursor}
end</template></entry><entry><trigger id="Ruby">col</trigger><description>&quot;tm - collect { |e| .. }&quot;</description><template>collect { |${e}| ${cursor} }</template></entry><entry><trigger id="Ruby">collect</trigger><description>&quot;tm - collect element&quot;</description><template>collect { |${element}| ${element}.${cursor} }</template></entry><entry><trigger id="Ruby">Comp</trigger><description>&quot;tm - include Comparable ..&quot;</description><template>include Comparable

def &lt;=&gt;(other)
	${cursor}
end</template></entry><entry><trigger id="Ruby">dee</trigger><description>&quot;tm - deep_copy(..)&quot;</description><template>Marshal.load(Marshal.dump(${obj_to_copy}))</template></entry><entry><trigger id="Ruby">def</trigger><description>&quot;tm - def … end&quot;</description><template>def ${method_name}
	${cursor}
end</template></entry><entry><trigger id="Ruby">defd</trigger><description>&quot;tm - def_delegator ..&quot;</description><template>def_delegator :${del_obj}, :${del_meth}, :${new_name}</template></entry><entry><trigger id="Ruby">defds</trigger><description>&quot;tm - def_delegators ..&quot;</description><template>def_delegators :${del_obj}, :${del_methods}</template></entry><entry><trigger id="Ruby">defs</trigger><description>&quot;tm - def self .. end&quot;</description><template>def self.${class_method_name}
	${cursor}
end</template></entry><entry><trigger id="Ruby">deft</trigger><description>&quot;tm - def test_ .. end&quot;</description><template>def test_${case_name}
	${cursor}
end</template></entry><entry><trigger id="Ruby">deli</trigger><description>&quot;tm - delete_if { |e| .. }&quot;</description><template>delete_if { |${e}| ${cursor} }</template></entry><entry><trigger id="Ruby">det</trigger><description>&quot;tm - detect { |e| .. }&quot;</description><template>detect { |${e}| ${cursor} }</template></entry><entry><trigger id="Ruby">Dir</trigger><description>&quot;tm - Dir.glob(&quot;..&quot;) { |file| .. }&quot;</description><template>Dir.glob(${glob}) { |${file}| ${cursor} }</template></entry><entry><trigger id="Ruby">do</trigger><description>&quot;tm - do … end&quot;</description><template>do
	${cursor}
end</template></entry><entry><trigger id="Ruby">doo</trigger><description>&quot;tm - Insert do |object| … end&quot;</description><template>do |${object}|
	${cursor}
end</template></entry><entry><trigger id="Ruby">dow</trigger><description>&quot;tm - downto(0) { |n| .. }&quot;</description><template>downto(${0}) { |${n}|${cursor} }</template></entry><entry><trigger id="Ruby">ea</trigger><description>&quot;tm - each { |e| .. }&quot;</description><template>each { |${e}| ${cursor} }</template></entry><entry><trigger id="Ruby">eab</trigger><description>&quot;tm - each_byte { |byte| .. }&quot;</description><template>each_byte { |${byte}| ${cursor} }</template></entry><entry><trigger id="Ruby">eac</trigger><description>&quot;tm - each_char { |chr| .. }&quot;</description><template>each_char { |${chr}| ${cursor} }</template></entry><entry><trigger id="Ruby">eac-1</trigger><description>&quot;tm - each_cons(..) { |group| .. }&quot;</description><template>each_cons(${2}) { |${group}| ${cursor} }</template></entry><entry><trigger id="Ruby">each</trigger><description>&quot;tm - each element&quot;</description><template>each { |${element}| ${element}.${cursor} }</template></entry><entry><trigger id="Ruby">each_with_index</trigger><description>&quot;tm - each_with_index&quot;</description><template>each_with_index { |${element}, ${idx}| ${element}.${cursor} }</template></entry><entry><trigger id="Ruby">eai</trigger><description>&quot;tm - each_index { |i| .. }&quot;</description><template>each_index { |${i}| ${cursor} }</template></entry><entry><trigger id="Ruby">eak</trigger><description>&quot;tm - each_key { |key| .. }&quot;</description><template>each_key { |${key}| ${cursor} }</template></entry><entry><trigger id="Ruby">eal</trigger><description>&quot;tm - each_line { |line| .. }&quot;</description><template>each_line${1} { |${line}| ${cursor} }</template></entry><entry><trigger id="Ruby">eap</trigger><description>&quot;tm - each_pair { |name, val| .. }&quot;</description><template>each_pair { |${name}, ${val}| ${cursor} }</template></entry><entry><trigger id="Ruby">eas</trigger><description>&quot;tm - each_slice(..) { |group| .. }&quot;</description><template>each_slice(${2}) { |${group}| ${cursor} }</template></entry><entry><trigger id="Ruby">eav</trigger><description>&quot;tm - each_value { |val| .. }&quot;</description><template>each_value { |${val}| ${cursor} }</template></entry><entry><trigger id="Ruby">eawi</trigger><description>&quot;tm - each_with_index { |e, i| .. }&quot;</description><template>each_with_index { |${e}, ${i}| ${cursor} }</template></entry><entry><trigger id="Ruby">elsif</trigger><description>&quot;tm - elsif ...&quot;</description><template>elsif ${condition}
	${cursor}</template></entry><entry><trigger id="Ruby">Embedded Code — #{…}</trigger><description>&quot;tm - Embedded Code — #{…}&quot;</description><template>#{${paste}}</template></entry><entry><trigger id="Ruby">Enum</trigger><description>&quot;tm - include Enumerable ..&quot;</description><template>include Enumerable

def each(&amp;block)
	${cursor}
end</template></entry><entry><trigger id="Ruby">fet</trigger><description>&quot;tm - fetch(name) { |key| .. }&quot;</description><template>fetch(${name}) { |${key}|${cursor} }</template></entry><entry><trigger id="Ruby">fil</trigger><description>&quot;tm - fill(range) { |i| .. }&quot;</description><template>fill(${range}) { |${i}|${cursor} }</template></entry><entry><trigger id="Ruby">File</trigger><description>&quot;tm - File.foreach (&quot;..&quot;) { |line| .. }&quot;</description><template>File.foreach(${file}) { |${line}| ${cursor} }</template></entry><entry><trigger id="Ruby">fin</trigger><description>&quot;tm - find { |e| .. }&quot;</description><template>find { |${e}| ${cursor} }</template></entry><entry><trigger id="Ruby">fina</trigger><description>&quot;tm - find_all { |e| .. }&quot;</description><template>find_all { |${e}| ${cursor} }</template></entry><entry><trigger id="Ruby">fl</trigger><description>&quot;tm - flunk(..)&quot;</description><template>flunk(&quot;${message}&quot;)</template></entry><entry><trigger id="Ruby">flao</trigger><description>&quot;tm - flatten_once()&quot;</description><template>inject(Array.new) { |${arr}, ${a}| ${arr}.push(*${a}) }</template></entry><entry><trigger id="Ruby">flash</trigger><description>&quot;tm - flash[…]&quot;</description><template>flash[:${notice}] = &quot;${Successfully}&quot;${cursor}</template></entry><entry><trigger id="Ruby">forin</trigger><description>&quot;tm - for … in … end&quot;</description><template>for ${element} in ${collection}
	${element}.${cursor}
end</template></entry><entry><trigger id="Ruby">Forw</trigger><description>&quot;tm - extend Forwardable&quot;</description><template>extend Forwardable</template></entry><entry><trigger id="Ruby">gre</trigger><description>&quot;tm - grep(/pattern/) { |match| .. }&quot;</description><template>grep(${pattern}) { |${match}| ${cursor} }</template></entry><entry><trigger id="Ruby">gsu</trigger><description>&quot;tm - gsub(/../) { |match| .. }&quot;</description><template>gsub(/${pattern}/) { |${match}|${cursor} }</template></entry><entry><trigger id="Ruby">habtm</trigger><description>&quot;tm - has_and_belongs_to_many&quot;</description><template>has_and_belongs_to_many :${object}</template></entry><entry><trigger id="Ruby">Hash</trigger><description>&quot;tm - Hash.new { |hash, key| hash[key] = .. }&quot;</description><template>Hash.new { |${hash}, ${key}| ${hash}[${key}] = ${cursor} }</template></entry><entry><trigger id="Ruby">Hash Pointer — =&amp;gt;</trigger><description>&quot;tm - Hash Pointer — =&gt;&quot;</description><template> =&gt; </template></entry><entry><trigger id="Ruby">hm</trigger><description>&quot;tm - has_many&quot;</description><template>has_many :${objects}</template></entry><entry><trigger id="Ruby">ho</trigger><description>&quot;tm - has_one&quot;</description><template>has_one :${object}</template></entry><entry><trigger id="Ruby">if</trigger><description>&quot;tm - if … end&quot;</description><template>if ${condition}
	${cursor}
end</template></entry><entry><trigger id="Ruby">ife</trigger><description>&quot;tm - if … else … end&quot;</description><template>if ${condition}
	${2}
else
	${3}
end</template></entry><entry><trigger id="Ruby">inj</trigger><description>&quot;tm - inject(init) { |mem, var| .. }&quot;</description><template>inject(${init}) { |${mem}, ${var}| ${cursor} }</template></entry><entry><trigger id="Ruby">inject</trigger><description>&quot;tm - inject object&quot;</description><template>inject(${object}) { |${injection}, ${element}| ${4} }${cursor}</template></entry><entry><trigger id="Ruby">lam</trigger><description>&quot;tm - lambda { |args| .. }&quot;</description><template>lambda { |${args}|${cursor} }</template></entry><entry><trigger id="Ruby">log</trigger><description>&quot;tm - logger.debug&quot;</description><template>logger.debug &quot;${message}&quot;${cursor}</template></entry><entry><trigger id="Ruby">log-1</trigger><description>&quot;tm - logger.error&quot;</description><template>logger.error &quot;${message}&quot;${cursor}</template></entry><entry><trigger id="Ruby">log-2</trigger><description>&quot;tm - logger.fatal&quot;</description><template>logger.fatal &quot;${message}&quot;${cursor}</template></entry><entry><trigger id="Ruby">log-3</trigger><description>&quot;tm - logger.info&quot;</description><template>logger.info &quot;${message}&quot;${cursor}</template></entry><entry><trigger id="Ruby">log-4</trigger><description>&quot;tm - logger.warn&quot;</description><template>logger.warn &quot;${message}&quot;${cursor}</template></entry><entry><trigger id="Ruby">map</trigger><description>&quot;tm - map { |e| .. }&quot;</description><template>map { |${e}| ${cursor} }</template></entry><entry><trigger id="Ruby">mapwi</trigger><description>&quot;tm - map_with_index { |e, i| .. }&quot;</description><template>enum_with_index.map { |${e}, ${i}| ${cursor} }</template></entry><entry><trigger id="Ruby">max</trigger><description>&quot;tm - max { |a, b| .. }&quot;</description><template>max { |a, b| ${cursor} }</template></entry><entry><trigger id="Ruby">mccc</trigger><description>&quot;tm - Create Several Columns&quot;</description><template>t.column :${title}, :${string}
mccc${cursor}</template></entry><entry><trigger id="Ruby">mcol</trigger><description>&quot;tm - Add Column&quot;</description><template>add_column :${table}, :${column}, :${string}</template></entry><entry><trigger id="Ruby">mcol-1</trigger><description>&quot;tm - Create Column in Table&quot;</description><template>t.column :${title}, :${string}${cursor}</template></entry><entry><trigger id="Ruby">mcol-2</trigger><description>&quot;tm - Remove Column&quot;</description><template>remove_column :${table}, :${column}</template></entry><entry><trigger id="Ruby">mcol-3</trigger><description>&quot;tm - Rename Column&quot;</description><template>rename_column :${column}, :${new_column}</template></entry><entry><trigger id="Ruby">Md</trigger><description>&quot;tm - Marshal.dump(.., file)&quot;</description><template>File.open(${dump}, &quot;w&quot;) { |${file}| Marshal.dump(${obj}, ${file}) }</template></entry><entry><trigger id="Ruby">min</trigger><description>&quot;tm - min { |a, b| .. }&quot;</description><template>min { |a, b| ${cursor} }</template></entry><entry><trigger id="Ruby">Ml</trigger><description>&quot;tm - Marshal.load(obj)&quot;</description><template>File.open(${dump}) { |${file}| Marshal.load(${file}) }</template></entry><entry><trigger id="Ruby">mm</trigger><description>&quot;tm - def method_missing .. end&quot;</description><template>def method_missing(meth, *args, &amp;block)
	${cursor}
end</template></entry><entry><trigger id="Ruby">mod</trigger><description>&quot;tm - module .. ClassMethods .. end&quot;</description><template>module ${ModuleName}
	module ClassMethods
		${cursor}
	end
	
	extend ClassMethods
	
	def self.included(receiver)
		receiver.extend(ClassMethods)
	end
	
	
end</template></entry><entry><trigger id="Ruby">mod-1</trigger><description>&quot;tm - module .. end&quot;</description><template>module ${ModuleName}
	${cursor}
end</template></entry><entry><trigger id="Ruby">mod-2</trigger><description>&quot;tm - module .. module_function .. end&quot;</description><template>module ${ModuleName}
	module_function
	
	${cursor}
end</template></entry><entry><trigger id="Ruby">mtab</trigger><description>&quot;tm - Create Table&quot;</description><template>create_table :${table} do |t|
    ${cursor}
end</template></entry><entry><trigger id="Ruby">mtab-1</trigger><description>&quot;tm - Drop / Create Table&quot;</description><template>drop_table :${table}</template></entry><entry><trigger id="Ruby">mtab-2</trigger><description>&quot;tm - Drop Table&quot;</description><template>drop_table :${table}
${cursor}</template></entry><entry><trigger id="Ruby">mtab-3</trigger><description>&quot;tm - Rename Table&quot;</description><template>rename_table :${table}, :${new_name}${cursor}</template></entry><entry><trigger id="Ruby">ope</trigger><description>&quot;tm - open(&quot;path/or/url&quot;, &quot;w&quot;) { |io| .. }&quot;</description><template>open(${pipe}) { |${io}| ${cursor} }</template></entry><entry><trigger id="Ruby">opt</trigger><description>&quot;tm - option(..)&quot;</description><template>opts.on( &quot;-${o}&quot;, &quot;--${option}&quot;${1},
         &quot;${description}&quot; ) do |${opt}|
	${cursor}
end</template></entry><entry><trigger id="Ruby">optp</trigger><description>&quot;tm - option_parse { .. }&quot;</description><template>require &quot;optparse&quot;
require &quot;ostruct&quot;

options = OpenStruct.new(${default})

ARGV.options do |opts|
	opts.banner = &quot;Usage:  #{File.basename($$PROGRAM_NAME)}  [OPTIONS]${1}&quot;
	
	opts.separator &quot;&quot;
	opts.separator &quot;Specific Options:&quot;
	
	${cursor}
	
	opts.separator &quot;Common Options:&quot;
	
	opts.on( &quot;-h&quot;, &quot;--help&quot;,
	         &quot;Show this message.&quot; ) do
		puts opts
		exit
	end
	
	begin
		opts.parse!
	rescue
		puts opts
		exit
	end
end
</template></entry><entry><trigger id="Ruby">par</trigger><description>&quot;tm - partition { |e| .. }&quot;</description><template>partition { |${e}| ${cursor} }</template></entry><entry><trigger id="Ruby">params[…]</trigger><description>&quot;tm - params[…]&quot;</description><template>params[:${id}]</template></entry><entry><trigger id="Ruby">patfh</trigger><description>&quot;tm - path_from_here( .. )&quot;</description><template>File.join(File.dirname(__FILE__), *%w[${here}])</template></entry><entry><trigger id="Ruby">Pn</trigger><description>&quot;tm - PStore.new( .. )&quot;</description><template>PStore.new(${file_name})</template></entry><entry><trigger id="Ruby">r</trigger><description>&quot;tm - attr_reader ..&quot;</description><template>attr_reader :${attr_names}</template></entry><entry><trigger id="Ruby">ra</trigger><description>&quot;tm - render (action)&quot;</description><template>render :action =&gt; &quot;${action}&quot;</template></entry><entry><trigger id="Ruby">ral</trigger><description>&quot;tm - render (action, layout)&quot;</description><template>render :action =&gt; &quot;${action}&quot;, :layout =&gt; &quot;${layoutname}&quot;</template></entry><entry><trigger id="Ruby">ran</trigger><description>&quot;tm - randomize()&quot;</description><template>sort_by { rand }</template></entry><entry><trigger id="Ruby">rb</trigger><description>&quot;tm - #!/usr/local/bin/ruby -w&quot;</description><template>#!/usr/bin/env ruby -w

</template></entry><entry><trigger id="Ruby">rcea</trigger><description>&quot;tm - render_component (action)&quot;</description><template>render_component :action =&gt; &quot;${index}&quot;</template></entry><entry><trigger id="Ruby">rcec</trigger><description>&quot;tm - render_component (controller)&quot;</description><template>render_component :controller =&gt; &quot;${items}&quot;</template></entry><entry><trigger id="Ruby">rceca</trigger><description>&quot;tm - render_component (controller, action)&quot;</description><template>render_component :controller =&gt; &quot;${items}&quot;, :action =&gt; &quot;${index}&quot;</template></entry><entry><trigger id="Ruby">rdb</trigger><description>&quot;tm - RAILS_DEFAULT_LOGGER.debug&quot;</description><template>RAILS_DEFAULT_LOGGER.debug &quot;${message}&quot;${cursor}</template></entry><entry><trigger id="Ruby">rea</trigger><description>&quot;tm - redirect_to (action)&quot;</description><template>redirect_to :action =&gt; &quot;${index}&quot;</template></entry><entry><trigger id="Ruby">reai</trigger><description>&quot;tm - redirect_to (action, id)&quot;</description><template>redirect_to :action =&gt; &quot;${show}&quot;, :id =&gt; ${item}</template></entry><entry><trigger id="Ruby">rec</trigger><description>&quot;tm - redirect_to (controller)&quot;</description><template>redirect_to :controller =&gt; &quot;${items}&quot;</template></entry><entry><trigger id="Ruby">reca</trigger><description>&quot;tm - redirect_to (controller, action)&quot;</description><template>redirect_to :controller =&gt; &quot;${items}&quot;, :action =&gt; &quot;${list}&quot;</template></entry><entry><trigger id="Ruby">recai</trigger><description>&quot;tm - redirect_to (controller, action, id)&quot;</description><template>redirect_to :controller =&gt; &quot;${items}&quot;, :action =&gt; &quot;${show}&quot;, :id =&gt; ${item}</template></entry><entry><trigger id="Ruby">rej</trigger><description>&quot;tm - reject { |e| .. }&quot;</description><template>reject { |${e}| ${cursor} }</template></entry><entry><trigger id="Ruby">reject</trigger><description>&quot;tm - reject element&quot;</description><template>reject { |${element}| ${element}.${cursor} }</template></entry><entry><trigger id="Ruby">rep</trigger><description>&quot;tm - results.report(..) { .. }&quot;</description><template>results.report(&quot;${name}:&quot;) { TESTS.times { ${cursor} } }</template></entry><entry><trigger id="Ruby">req</trigger><description>&quot;tm - require &quot;..&quot;&quot;</description><template>require &quot;${cursor}&quot;</template></entry><entry><trigger id="Ruby">reve</trigger><description>&quot;tm - reverse_each { |e| .. }&quot;</description><template>reverse_each { |${e}| ${cursor} }</template></entry><entry><trigger id="Ruby">rf</trigger><description>&quot;tm - render (file)&quot;</description><template>render :file =&gt; &quot;${filepath}&quot;</template></entry><entry><trigger id="Ruby">rfu</trigger><description>&quot;tm - render (file, use_full_path)&quot;</description><template>render :file =&gt; &quot;${filepath}&quot;, :use_full_path =&gt; ${false}</template></entry><entry><trigger id="Ruby">ri</trigger><description>&quot;tm - render (inline)&quot;</description><template>render :inline =&gt; &quot;${hello}&quot;</template></entry><entry><trigger id="Ruby">ril</trigger><description>&quot;tm - render (inline, locals)&quot;</description><template>render :inline =&gt; &quot;${hello}&quot;, :locals =&gt; { ${name} =&gt; &quot;${value}&quot;${4} }</template></entry><entry><trigger id="Ruby">rit</trigger><description>&quot;tm - render (inline, type)&quot;</description><template>render :inline =&gt; &quot;${hello}&quot;, :type =&gt; ${rxml}</template></entry><entry><trigger id="Ruby">rl</trigger><description>&quot;tm - render (layout)&quot;</description><template>render :layout =&gt; &quot;${layoutname}&quot;</template></entry><entry><trigger id="Ruby">rn</trigger><description>&quot;tm - render (nothing)&quot;</description><template>render :nothing =&gt; ${true}</template></entry><entry><trigger id="Ruby">rns</trigger><description>&quot;tm - render (nothing, status)&quot;</description><template>render :nothing =&gt; ${true}, :status =&gt; ${401}</template></entry><entry><trigger id="Ruby">rp</trigger><description>&quot;tm - render (partial)&quot;</description><template>render :partial =&gt; &quot;${item}&quot;</template></entry><entry><trigger id="Ruby">rpc</trigger><description>&quot;tm - render (partial, collection)&quot;</description><template>render :partial =&gt; &quot;${item}&quot;, :collection =&gt; ${items}</template></entry><entry><trigger id="Ruby">rpl</trigger><description>&quot;tm - render (partial, locals)&quot;</description><template>render :partial =&gt; &quot;${item}&quot;, :locals =&gt; { :${name} =&gt; &quot;${value}&quot;${4} }</template></entry><entry><trigger id="Ruby">rpo</trigger><description>&quot;tm - render (partial, object)&quot;</description><template>render :partial =&gt; &quot;${item}&quot;, :object =&gt; ${object}</template></entry><entry><trigger id="Ruby">rps</trigger><description>&quot;tm - render (partial, status)&quot;</description><template>render :partial =&gt; &quot;${item}&quot;, :status =&gt; ${500}</template></entry><entry><trigger id="Ruby">rt</trigger><description>&quot;tm - render (text)&quot;</description><template>render :text =&gt; &quot;${render}&quot;</template></entry><entry><trigger id="Ruby">rtl</trigger><description>&quot;tm - render (text, layout)&quot;</description><template>render :text =&gt; &quot;${render}&quot;, :layout =&gt; &quot;${layoutname}&quot;</template></entry><entry><trigger id="Ruby">rtlt</trigger><description>&quot;tm - render (text, layout =&gt; true)&quot;</description><template>render :text =&gt; &quot;${render}&quot;, :layout =&gt; ${true}</template></entry><entry><trigger id="Ruby">rts</trigger><description>&quot;tm - render (text, status)&quot;</description><template>render :text =&gt; &quot;${render}&quot;, :status =&gt; ${401}</template></entry><entry><trigger id="Ruby">rw</trigger><description>&quot;tm - attr_accessor ..&quot;</description><template>attr_accessor :${attr_names}</template></entry><entry><trigger id="Ruby">sca</trigger><description>&quot;tm - scan(/../) { |match| .. }&quot;</description><template>scan(/${pattern}/) { |${match}| ${cursor} }</template></entry><entry><trigger id="Ruby">sel</trigger><description>&quot;tm - select { |e| .. }&quot;</description><template>select { |${e}| ${cursor} }</template></entry><entry><trigger id="Ruby">select</trigger><description>&quot;tm - select element&quot;</description><template>select { |${element}| ${element}.${2} }${cursor}</template></entry><entry><trigger id="Ruby">session[…]</trigger><description>&quot;tm - session[…]&quot;</description><template>session[:${User}]</template></entry><entry><trigger id="Ruby">sin</trigger><description>&quot;tm - singleton_class()&quot;</description><template>class &lt;&lt; self; self end</template></entry><entry><trigger id="Ruby">sor</trigger><description>&quot;tm - sort { |a, b| .. }&quot;</description><template>sort { |a, b| ${cursor} }</template></entry><entry><trigger id="Ruby">sorb</trigger><description>&quot;tm - sort_by { |e| .. }&quot;</description><template>sort_by { |${e}| ${cursor} }</template></entry><entry><trigger id="Ruby">ste</trigger><description>&quot;tm - step(2) { |e| .. }&quot;</description><template>step(${2}) { |${n}|${cursor} }</template></entry><entry><trigger id="Ruby">sub</trigger><description>&quot;tm - sub(/../) { |match| .. }&quot;</description><template>sub(/${pattern}/) { |${match}|${cursor} }</template></entry><entry><trigger id="Ruby">tc</trigger><description>&quot;tm - class .. &lt; Test::Unit::TestCase .. end&quot;</description><template>require &quot;test/unit&quot;

require &quot;${library_file_name}&quot;

class Test${amp} &lt; Test::Unit::TestCase
	def test_${case_name}
		${cursor}
	end
end</template></entry><entry><trigger id="Ruby">tim</trigger><description>&quot;tm - times { |n| .. }&quot;</description><template>times { |${n}|${cursor} }</template></entry><entry><trigger id="Ruby">tra</trigger><description>&quot;tm - transaction( .. ) { .. }&quot;</description><template>transaction${1} { ${cursor} }</template></entry><entry><trigger id="Ruby">ts</trigger><description>&quot;tm - require &quot;tc_..&quot; ..&quot;</description><template>require &quot;test/unit&quot;

require &quot;tc_${test_case_file}&quot;
require &quot;tc_${test_case_file}&quot;
</template></entry><entry><trigger id="Ruby">uni</trigger><description>&quot;tm - unix_filter { .. }&quot;</description><template>ARGF.each_line${1} do |${line}|
	${cursor}
end</template></entry><entry><trigger id="Ruby">unless</trigger><description>&quot;tm - unless … end&quot;</description><template>unless ${condition}
	${cursor}
end</template></entry><entry><trigger id="Ruby">until</trigger><description>&quot;tm - until ... end&quot;</description><template>until ${condition}
	${cursor}
end</template></entry><entry><trigger id="Ruby">upt</trigger><description>&quot;tm - upto(1.0/0.0) { |n| .. }&quot;</description><template>upto(${0}) { |${n}|${cursor} }</template></entry><entry><trigger id="Ruby">usai</trigger><description>&quot;tm - usage_if()&quot;</description><template>if ARGV.${1}
  puts &quot;Usage:  #{$$PROGRAM_NAME} ${ARGS_GO_HERE}&quot;
  exit
end</template></entry><entry><trigger id="Ruby">usau</trigger><description>&quot;tm - usage_unless()&quot;</description><template>unless ARGV.${1}
  puts &quot;Usage:  #{$$PROGRAM_NAME} ${ARGS_GO_HERE}&quot;
  exit
end</template></entry><entry><trigger id="Ruby">va</trigger><description>&quot;tm - validates_associated&quot;</description><template>validates_associated :${attribute}</template></entry><entry><trigger id="Ruby">vc</trigger><description>&quot;tm - validates_confirmation_of&quot;</description><template>validates_confirmation_of :${attribute}</template></entry><entry><trigger id="Ruby">ve</trigger><description>&quot;tm - validates_exclusion_of&quot;</description><template>validates_exclusion_of :${attribute}</template></entry><entry><trigger id="Ruby">verify</trigger><description>&quot;tm - verify — redirect&quot;</description><template>verify :only =&gt; [:${1}], :session =&gt; :user, :params =&gt; :id, :redirect_to =&gt; {:action =&gt; '${index}'}
</template></entry><entry><trigger id="Ruby">verify-1</trigger><description>&quot;tm - verify — render&quot;</description><template>verify :only =&gt; [:${1}], :method =&gt; :post, :render =&gt; {:status =&gt; 500, :text =&gt; &quot;use HTTP-POST&quot;}
</template></entry><entry><trigger id="Ruby">vl</trigger><description>&quot;tm - validates_length_of&quot;</description><template>validates_length_of :${attribute}, :within =&gt; ${20}</template></entry><entry><trigger id="Ruby">vp</trigger><description>&quot;tm - validates_presence_of&quot;</description><template>validates_presence_of :${attribute}</template></entry><entry><trigger id="Ruby">vpif</trigger><description>&quot;tm - validates_presence_of if&quot;</description><template>validates_presence_of :${attribute}, :if =&gt; proc { |obj| ${condition} }}</template></entry><entry><trigger id="Ruby">vu</trigger><description>&quot;tm - validates_uniqueness_of&quot;</description><template>validates_uniqueness_of :${attribute}</template></entry><entry><trigger id="Ruby">w</trigger><description>&quot;tm - attr_writer ..&quot;</description><template>attr_writer :${attr_names}</template></entry><entry><trigger id="Ruby">when</trigger><description>&quot;tm - when …&quot;</description><template>when ${condition}
	${cursor}</template></entry><entry><trigger id="Ruby">while</trigger><description>&quot;tm - while ... end&quot;</description><template>while ${condition}
	${cursor}
end</template></entry><entry><trigger id="Ruby">y</trigger><description>&quot;tm - :yields:&quot;</description><template> :yields: ${arguments}</template></entry><entry><trigger id="Ruby">Yd</trigger><description>&quot;tm - YAML.dump(.., file)&quot;</description><template>File.open(${yaml}, &quot;w&quot;) { |${file}| YAML.dump(${obj}, ${file}) }</template></entry><entry><trigger id="Ruby">Yl</trigger><description>&quot;tm - YAML.load(file)&quot;</description><template>File.open(${yaml}) { |${file}| YAML.load(${file}) }</template></entry><entry><trigger id="Ruby">zip</trigger><description>&quot;tm - zip(enums) { |row| .. }&quot;</description><template>zip(${enums}) { |${row}| ${cursor} }</template></entry></snippet>
